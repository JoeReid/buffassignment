package postgres_test

import (
	"testing"
	"time"

	"github.com/JoeReid/buffassignment/internal/config"
	"github.com/JoeReid/buffassignment/internal/model"
	"github.com/JoeReid/buffassignment/internal/model/postgres"
	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestGetVideoStream(t *testing.T) {
	dc, err := config.DBConfig()
	require.NoError(t, err, "failed to configure DB connection")

	store, err := postgres.NewStore(
		postgres.SetDBUser(dc.DBUser),
		postgres.SetDBPassword(dc.DBPassword),
		postgres.SetDBHostname(dc.DBHost),
		postgres.SetDBPort(dc.DBPort),
		postgres.SetDBName(dc.DBName),
		postgres.SetConnectTimeout(dc.DBConnectTimeout),
	)
	require.NoError(t, err, "failed to create store")

	// this uuid is predictably generated by the db seed process
	sentinelUUID, err := uuid.Parse(`d1e2c649-8185-4ad8-a81d-0d86d1e91e00`)
	require.NoError(t, err, "failed to parse uuid")

	b, err := store.GetVideoStream(model.VideoStreamID(sentinelUUID))
	require.NoError(t, err, "failed to get video stream")
	assert.NotEmpty(t, b, "the video stream should be populated with data")
}

func TestListVideoStream(t *testing.T) {
	dc, err := config.DBConfig()
	require.NoError(t, err, "failed to configure DB connection")

	store, err := postgres.NewStore(
		postgres.SetDBUser(dc.DBUser),
		postgres.SetDBPassword(dc.DBPassword),
		postgres.SetDBHostname(dc.DBHost),
		postgres.SetDBPort(dc.DBPort),
		postgres.SetDBName(dc.DBName),
		postgres.SetConnectTimeout(dc.DBConnectTimeout),
	)
	require.NoError(t, err, "failed to create store")

	b, err := store.ListBuff(0, 0)
	require.NoError(t, err, "failed to list video streams")
	assert.NotEmpty(t, b, "the video stream should be populated with data")
}

func TestCreateVideoStream(t *testing.T) {
	dc, err := config.DBConfig()
	require.NoError(t, err, "failed to configure DB connection")

	store, err := postgres.NewStore(
		postgres.SetDBUser(dc.DBUser),
		postgres.SetDBPassword(dc.DBPassword),
		postgres.SetDBHostname(dc.DBHost),
		postgres.SetDBPort(dc.DBPort),
		postgres.SetDBName(dc.DBName),
		postgres.SetConnectTimeout(dc.DBConnectTimeout),
	)
	require.NoError(t, err, "failed to create store")

	sentinelUUID, err := uuid.Parse(`257a3134-dc05-4049-ae5b-6bd13ae86ab8`)
	require.NoError(t, err, "failed to parse uuid")

	now := time.Now()
	v := model.VideoStream{
		ID:        model.VideoStreamID(sentinelUUID),
		Title:     "a sepcial testing stream",
		CreatedAt: now,
		UpdatedAt: now,
	}
	err = store.CreateVideoStream(v)
	require.NoError(t, err, "failed to create video stream")
}

func TestDeleteVideoStream(t *testing.T) {
	dc, err := config.DBConfig()
	require.NoError(t, err, "failed to configure DB connection")

	store, err := postgres.NewStore(
		postgres.SetDBUser(dc.DBUser),
		postgres.SetDBPassword(dc.DBPassword),
		postgres.SetDBHostname(dc.DBHost),
		postgres.SetDBPort(dc.DBPort),
		postgres.SetDBName(dc.DBName),
		postgres.SetConnectTimeout(dc.DBConnectTimeout),
	)
	require.NoError(t, err, "failed to create store")

	sentinelUUID, err := uuid.Parse(`257a3134-dc05-4049-ae5b-6bd13ae86ab8`)
	require.NoError(t, err, "failed to parse uuid")

	err = store.DeleteVideoStream(model.VideoStreamID(sentinelUUID))

	// For now this feature is not implemented
	require.Error(t, err, "not implemented")
}

func TestUpdateVideoStream(t *testing.T) {
	dc, err := config.DBConfig()
	require.NoError(t, err, "failed to configure DB connection")

	store, err := postgres.NewStore(
		postgres.SetDBUser(dc.DBUser),
		postgres.SetDBPassword(dc.DBPassword),
		postgres.SetDBHostname(dc.DBHost),
		postgres.SetDBPort(dc.DBPort),
		postgres.SetDBName(dc.DBName),
		postgres.SetConnectTimeout(dc.DBConnectTimeout),
	)
	require.NoError(t, err, "failed to create store")

	sentinelUUID := uuid.New()

	now := time.Now()
	v := model.VideoStream{
		ID:        model.VideoStreamID(sentinelUUID),
		Title:     "a sepcial testing stream",
		CreatedAt: now,
		UpdatedAt: now,
	}
	err = store.UpdateVideoStream(model.VideoStreamID(sentinelUUID), v)

	// For now this feature is not implemented
	require.Error(t, err, "not implemented")
}
